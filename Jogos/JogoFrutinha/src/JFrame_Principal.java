import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author laboratorio
 */
public class JFrame_Principal extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(JFrame_Principal.class.getName());
    public Set<Integer> pressed = new HashSet<>();
    public int pontuacaoJogador1 = 0;
    public int pontuacaoJogador2 = 0;
    
    /**
     * Creates new form JFrame_Principal
     */
    public JFrame_Principal() {
        initComponents();
        getContentPane().setLayout(null);
        
        //Thread que fica verificando as teclas pressionadas e soltadas a cada 40 ms
        new Thread() {
            public void run() {
                while (true) {
                    try {
                        verificaTeclas();
                        try {
                            sleep(40);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(JFrame_Principal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } catch (Exception e) {
                        System.out.println("Erro na Thread: " + e.getMessage());
                    }
                }
            }
        }.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_ghost1 = new javax.swing.JButton();
        jButton_ghost2 = new javax.swing.JButton();
        jButton_frutinha = new javax.swing.JButton();
        jLabel_pontuacaoJogador1 = new javax.swing.JLabel();
        jLabel_pontuacaoJogador2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton_ghost1.setText("1");
        jButton_ghost1.setFocusable(false);

        jButton_ghost2.setText("2");
        jButton_ghost2.setFocusable(false);

        jButton_frutinha.setText("@");
        jButton_frutinha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton_frutinhaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButton_frutinhaKeyReleased(evt);
            }
        });

        jLabel_pontuacaoJogador1.setText("Jogador1 :  0");
        jLabel_pontuacaoJogador1.setFocusable(false);

        jLabel_pontuacaoJogador2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_pontuacaoJogador2.setText("0  : Jogador2");
        jLabel_pontuacaoJogador2.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_pontuacaoJogador1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(jLabel_pontuacaoJogador2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_ghost1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_frutinha)
                        .addGap(93, 93, 93)
                        .addComponent(jButton_ghost2)))
                .addGap(83, 83, 83))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_pontuacaoJogador1)
                    .addComponent(jLabel_pontuacaoJogador2))
                .addGap(115, 115, 115)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_ghost2)
                    .addComponent(jButton_frutinha)
                    .addComponent(jButton_ghost1))
                .addContainerGap(140, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /***
     * Pega o codigo da tecla pressionada e adiciona em um HashSet
     * @param evt evento da tecla pressionada
     */
    private void jButton_frutinhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton_frutinhaKeyPressed
        //Utiliza synchronized para evitar que duas ou mais threads 
        //modifiquem o HashSet ao mesmo tempo
        synchronized (JFrame_Principal.this) {
            pressed.add(evt.getKeyCode());
        }
    }//GEN-LAST:event_jButton_frutinhaKeyPressed

    /***
     * Pega o codigo da tecla soltada e adiciona em um HashSet
     * @param evt evento da tecla soltada
     */
    private void jButton_frutinhaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton_frutinhaKeyReleased
        //Utiliza synchronized para evitar que duas ou mais threads 
        //modifiquem o HashSet ao mesmo tempo
        synchronized (JFrame_Principal.this) {
            pressed.remove(evt.getKeyCode());
        }
    }//GEN-LAST:event_jButton_frutinhaKeyReleased

    /***
     * verifica quais teclas foram pressionadas e faz o movimento para cada uma
     */
    public void verificaTeclas(){
        for(Integer tecla : pressed){
            switch (tecla) {
                case 38: Movimenta.cima(jButton_ghost1); break;
                case 40: Movimenta.baixo(jButton_ghost1, this); break;
                case 37: Movimenta.esquerda(jButton_ghost1); break;
                case 39: Movimenta.direita(jButton_ghost1, this); break;
                case 87: Movimenta.cima(jButton_ghost2); break;
                case 83: Movimenta.baixo(jButton_ghost2, this); break;
                case 65: Movimenta.esquerda(jButton_ghost2); break;
                case 68: Movimenta.direita(jButton_ghost2, this); break;
            }

            //Se o jogador 1 pegou a frutinha
            if (Util.pegou(jButton_frutinha, jButton_ghost1)) {
                jButton_frutinha = Util.sorteiaPosicao(jButton_frutinha, JFrame_Principal.this, jButton_ghost1, jButton_ghost2);
                pontuacaoJogador1++;
                jLabel_pontuacaoJogador1.setText("Jogador1 : " + pontuacaoJogador1);
            }
            
            //Se o jogador 2 pegou a frutinha
            if (Util.pegou(jButton_frutinha, jButton_ghost2)) {
                jButton_frutinha = Util.sorteiaPosicao(jButton_frutinha, JFrame_Principal.this, jButton_ghost1, jButton_ghost2);
                pontuacaoJogador2++;
                jLabel_pontuacaoJogador2.setText(pontuacaoJogador2 + " : Jogador2");
            }
            
            //Se o jogador 1 ganhou (Conseguiu 10 pontos)
            if(pontuacaoJogador1 == 10){
                // LIMPA as teclas ANTES de mostrar o diálogo
                synchronized (this) {
                    pressed.clear();
                }
                
                int resposta = JOptionPane.showConfirmDialog(this, 
                    "Jogador 1 venceu!\nDeseja jogar novamente?", 
                    "Fim de Jogo", 
                    JOptionPane.YES_NO_OPTION);

                if(resposta == JOptionPane.YES_OPTION){
                    reiniciarJogo();
                } else {
                    // Fecha o jogo
                    System.exit(0); 
                }
            //Se o jogador 2 ganhou (Conseguiu 10 pontos)
            } else if (pontuacaoJogador2 == 10){
                // LIMPA as teclas ANTES de mostrar o diálogo
                synchronized (this) {
                    pressed.clear();
                }
                
                int resposta = JOptionPane.showConfirmDialog(this, 
                    "Jogador 2 venceu!\nDeseja jogar novamente?", 
                    "Fim de Jogo", 
                    JOptionPane.YES_NO_OPTION);

                if(resposta == JOptionPane.YES_OPTION){
                    reiniciarJogo();
                } else {
                    System.exit(0); // Fecha o jogo
                }
            } 
        }
    }
    
    private void reiniciarJogo() {
        // Zera as pontuações
        pontuacaoJogador1 = 0;
        pontuacaoJogador2 = 0;

        // Atualiza os textos na tela
        jLabel_pontuacaoJogador1.setText("Jogador1 : " + pontuacaoJogador1);
        jLabel_pontuacaoJogador2.setText(pontuacaoJogador2 + " : Jogador2");

        // REPOSICIONA MANUALMENTE nas posições iniciais
        jButton_ghost1.setBounds(100, 200, jButton_ghost1.getWidth(), jButton_ghost1.getHeight());  // Posição inicial jogador 1
        jButton_ghost2.setBounds(200, 200, jButton_ghost2.getWidth(), jButton_ghost2.getHeight()); // Posição inicial jogador 2
        
        // Sorteia nova posição só para a frutinha
        jButton_frutinha = Util.sorteiaPosicao(jButton_frutinha, this, jButton_ghost1, jButton_ghost2);
        
        // Garante o foco na frutinha para capturar teclas
        jButton_frutinha.requestFocus();

        // Força repaint da tela
        repaint();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new JFrame_Principal().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_frutinha;
    private javax.swing.JButton jButton_ghost1;
    private javax.swing.JButton jButton_ghost2;
    private javax.swing.JLabel jLabel_pontuacaoJogador1;
    private javax.swing.JLabel jLabel_pontuacaoJogador2;
    // End of variables declaration//GEN-END:variables
}
